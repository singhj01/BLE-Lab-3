ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.InitializeSystem,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  21              		.type	InitializeSystem, %function
  22              	InitializeSystem:
  23              	.LFB35:
  24              		.file 1 ".\\main.c"
   1:.\main.c      **** /*****************************************************************************
   2:.\main.c      **** * File Name: main.c
   3:.\main.c      **** *
   4:.\main.c      **** * Version: 1.0
   5:.\main.c      **** *
   6:.\main.c      **** * Description:
   7:.\main.c      **** * This is the top level file for the PSoC 4 BLE Lab 3.
   8:.\main.c      **** *
   9:.\main.c      **** * Hardware Dependency:
  10:.\main.c      **** * CY8CKIT-042 BLE Pioneer Kit
  11:.\main.c      **** *
  12:.\main.c      **** ******************************************************************************
  13:.\main.c      **** * Copyright (2014), Cypress Semiconductor Corporation.
  14:.\main.c      **** ******************************************************************************
  15:.\main.c      **** * This software is owned by Cypress Semiconductor Corporation (Cypress) and is
  16:.\main.c      **** * protected by and subject to worldwide patent protection (United States and
  17:.\main.c      **** * foreign), United States copyright laws and international treaty provisions.
  18:.\main.c      **** * Cypress hereby grants to licensee a personal, non-exclusive, non-transferable
  19:.\main.c      **** * license to copy, use, modify, create derivative works of, and compile the
  20:.\main.c      **** * Cypress Source Code and derivative works for the sole purpose of creating
  21:.\main.c      **** * custom software in support of licensee product to be used only in conjunction
  22:.\main.c      **** * with a Cypress integrated circuit as specified in the applicable agreement.
  23:.\main.c      **** * Any reproduction, modification, translation, compilation, or representation of
  24:.\main.c      **** * this software except as specified above is prohibited without the express
  25:.\main.c      **** * written permission of Cypress.
  26:.\main.c      **** *
  27:.\main.c      **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH
  28:.\main.c      **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  29:.\main.c      **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  30:.\main.c      **** * Cypress reserves the right to make changes without further notice to the
  31:.\main.c      **** * materials described herein. Cypress does not assume any liability arising out
  32:.\main.c      **** * of the application or use of any product or circuit described herein. Cypress
  33:.\main.c      **** * does not authorize its products for use as critical components in life-support
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 2


  34:.\main.c      **** * systems where a malfunction or failure may reasonably be expected to result in
  35:.\main.c      **** * significant injury to the user. The inclusion of Cypress' product in a life-
  36:.\main.c      **** * support systems application implies that the manufacturer assumes all risk of
  37:.\main.c      **** * such use and in doing so indemnifies Cypress against all charges. Use may be
  38:.\main.c      **** * limited by and subject to the applicable Cypress software license agreement.
  39:.\main.c      **** *****************************************************************************/
  40:.\main.c      **** 
  41:.\main.c      **** 
  42:.\main.c      **** /*****************************************************************************
  43:.\main.c      **** * Included headers
  44:.\main.c      **** *****************************************************************************/
  45:.\main.c      **** #include <project.h>
  46:.\main.c      **** #include <stdbool.h>
  47:.\main.c      **** #include "main.h"
  48:.\main.c      **** #include "HeartRateProcessing.h"
  49:.\main.c      **** #include "BleProcessing.h"
  50:.\main.c      **** #include "WatchdogTimer.h"
  51:.\main.c      **** 
  52:.\main.c      **** 
  53:.\main.c      **** /*****************************************************************************
  54:.\main.c      **** * Macros
  55:.\main.c      **** *****************************************************************************/
  56:.\main.c      **** #define TIME_SINCE_CONNECTED_MS         (5000)
  57:.\main.c      **** 
  58:.\main.c      **** 
  59:.\main.c      **** /*****************************************************************************
  60:.\main.c      **** * Global variables
  61:.\main.c      **** *****************************************************************************/
  62:.\main.c      **** //static CYBLE_GAP_CONN_UPDATE_PARAM_T hrmConnectionParam =
  63:.\main.c      **** //{
  64:.\main.c      **** //    16,         /* Minimum connection interval of 20 ms */
  65:.\main.c      **** //    16,         /* Maximum connection interval of 20 ms */
  66:.\main.c      **** //    49,         /* Slave latency of 49 */
  67:.\main.c      **** //    500         /* Supervision timeout of 5 seconds */
  68:.\main.c      **** //};
  69:.\main.c      **** 
  70:.\main.c      **** 
  71:.\main.c      **** /*****************************************************************************
  72:.\main.c      **** * Static function definitions
  73:.\main.c      **** *****************************************************************************/
  74:.\main.c      **** 
  75:.\main.c      **** /*****************************************************************************
  76:.\main.c      **** * Function Name: InitializeSystem
  77:.\main.c      **** ******************************************************************************
  78:.\main.c      **** * Summary:
  79:.\main.c      **** * Initializes all the blocks of the system.
  80:.\main.c      **** *
  81:.\main.c      **** * Parameters:
  82:.\main.c      **** * None
  83:.\main.c      **** *
  84:.\main.c      **** * Return:
  85:.\main.c      **** * None
  86:.\main.c      **** *
  87:.\main.c      **** * Theory:
  88:.\main.c      **** * The function enables the Opamp and ADC for the heart rate measurement, and 
  89:.\main.c      **** * setups the BLE component. It also starts the watchdog timer and ensures that 
  90:.\main.c      **** * all the status LEDs are off at system startup. 
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 3


  91:.\main.c      **** *
  92:.\main.c      **** * Side Effects:
  93:.\main.c      **** * None
  94:.\main.c      **** *
  95:.\main.c      **** *****************************************************************************/
  96:.\main.c      **** static void InitializeSystem(void)
  97:.\main.c      **** {
  25              		.loc 1 97 0
  26              		.cfi_startproc
  27 0000 80B5     		push	{r7, lr}
  28              		.cfi_def_cfa_offset 8
  29              		.cfi_offset 7, -8
  30              		.cfi_offset 14, -4
  31 0002 00AF     		add	r7, sp, #0
  32              		.cfi_def_cfa_register 7
  98:.\main.c      ****     #if (RGB_LED_IN_PROJECT)
  99:.\main.c      ****         /* Turn off all LEDs */
 100:.\main.c      ****         Led_Advertising_Green_Write(1);
  33              		.loc 1 100 0
  34 0004 0120     		mov	r0, #1
  35 0006 FFF7FEFF 		bl	Led_Advertising_Green_Write
 101:.\main.c      ****         Led_Connected_Blue_Write(1);
  36              		.loc 1 101 0
  37 000a 0120     		mov	r0, #1
  38 000c FFF7FEFF 		bl	Led_Connected_Blue_Write
 102:.\main.c      ****     #endif  /* #if (RGB_LED_IN_PROJECT) */
 103:.\main.c      **** 
 104:.\main.c      ****     /* Enabling Global interrupts */
 105:.\main.c      ****     CyGlobalIntEnable; 
  39              		.loc 1 105 0
  40              	@ 105 ".\main.c" 1
  41 0010 62B6     		CPSIE   i
  42              	@ 0 "" 2
 106:.\main.c      **** 	
 107:.\main.c      ****     /* Start Opamp and ADC components */
 108:.\main.c      **** 	Opamp_Start();
  43              		.loc 1 108 0
  44              		.code	16
  45 0012 FFF7FEFF 		bl	Opamp_Start
 109:.\main.c      ****     ADC_Start();
  46              		.loc 1 109 0
  47 0016 FFF7FEFF 		bl	ADC_Start
 110:.\main.c      **** 	
 111:.\main.c      ****     /* Start BLE component */
 112:.\main.c      ****     CyBle_Start(GeneralEventHandler);
  48              		.loc 1 112 0
  49 001a 064B     		ldr	r3, .L2
  50 001c 181C     		mov	r0, r3
  51 001e FFF7FEFF 		bl	CyBle_Start
 113:.\main.c      ****     
 114:.\main.c      ****     
 115:.\main.c      ****     /* Register the Heart Rate Service event handler callback. The function
 116:.\main.c      ****      * to be registered is HrsEventHandler().
 117:.\main.c      ****      */
 118:.\main.c      **** 	CyBle_HrsRegisterAttrCallback(HrsEventHandler);
  52              		.loc 1 118 0
  53 0022 054B     		ldr	r3, .L2+4
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 4


  54 0024 181C     		mov	r0, r3
  55 0026 FFF7FEFF 		bl	CyBle_HrsRegisterAttrCallback
 119:.\main.c      ****     
 120:.\main.c      ****     
 121:.\main.c      ****     /* Start the Watchdog Timer */
 122:.\main.c      **** 	WatchdogTimer_Start();
  56              		.loc 1 122 0
  57 002a FFF7FEFF 		bl	WatchdogTimer_Start
 123:.\main.c      **** }
  58              		.loc 1 123 0
  59 002e BD46     		mov	sp, r7
  60              		@ sp needed
  61 0030 80BD     		pop	{r7, pc}
  62              	.L3:
  63 0032 C046     		.align	2
  64              	.L2:
  65 0034 00000000 		.word	GeneralEventHandler
  66 0038 00000000 		.word	HrsEventHandler
  67              		.cfi_endproc
  68              	.LFE35:
  69              		.size	InitializeSystem, .-InitializeSystem
  70              		.section	.text.main,"ax",%progbits
  71              		.align	2
  72              		.global	main
  73              		.code	16
  74              		.thumb_func
  75              		.type	main, %function
  76              	main:
  77              	.LFB36:
 124:.\main.c      **** 
 125:.\main.c      **** 
 126:.\main.c      **** /*****************************************************************************
 127:.\main.c      **** * Public function definitions
 128:.\main.c      **** *****************************************************************************/
 129:.\main.c      **** 
 130:.\main.c      **** /*****************************************************************************
 131:.\main.c      **** * Function Name: main
 132:.\main.c      **** ******************************************************************************
 133:.\main.c      **** * Summary:
 134:.\main.c      **** * The main function for the project.
 135:.\main.c      **** *
 136:.\main.c      **** * Parameters:
 137:.\main.c      **** * None
 138:.\main.c      **** *
 139:.\main.c      **** * Return:
 140:.\main.c      **** * None
 141:.\main.c      **** *
 142:.\main.c      **** * Theory:
 143:.\main.c      **** * The main function first calls the initialization function to start the 
 144:.\main.c      **** * system, and then enters a loop to run forever. In the main loop, it scans
 145:.\main.c      **** * the heart rate first, then sends a notification packet every second to a 
 146:.\main.c      **** * BLE connected device. It then enters low power (deep sleep) state, waiting
 147:.\main.c      **** * for the periodic wakeup interrupt from watchdog timer.
 148:.\main.c      **** * When the device is disconnected or when advertisement timeout happens, 
 149:.\main.c      **** * the device enters Hibernate mode, waiting for the SW2 switch press to wakeup.
 150:.\main.c      **** *
 151:.\main.c      **** * Side Effects:
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 5


 152:.\main.c      **** * None
 153:.\main.c      **** *
 154:.\main.c      **** *****************************************************************************/
 155:.\main.c      **** int main()
 156:.\main.c      **** {
  78              		.loc 1 156 0
  79              		.cfi_startproc
  80 0000 90B5     		push	{r4, r7, lr}
  81              		.cfi_def_cfa_offset 12
  82              		.cfi_offset 4, -12
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 83B0     		sub	sp, sp, #12
  86              		.cfi_def_cfa_offset 24
  87 0004 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
 157:.\main.c      ****     static uint32 previousTimestamp = 0;
 158:.\main.c      ****     static uint32 currentTimestamp = 0;
 159:.\main.c      ****     //CYBLE_LP_MODE_T bleMode;
 160:.\main.c      ****     uint8 interruptStatus;
 161:.\main.c      ****     
 162:.\main.c      ****     /* Initialize all blocks of the system */
 163:.\main.c      **** 	InitializeSystem();
  89              		.loc 1 163 0
  90 0006 FFF7FEFF 		bl	InitializeSystem
 164:.\main.c      ****     
 165:.\main.c      ****     /* Run forever */
 166:.\main.c      ****     PWM_1_Start();
  91              		.loc 1 166 0
  92 000a FFF7FEFF 		bl	PWM_1_Start
  93              	.L9:
 167:.\main.c      ****     for(;;)
 168:.\main.c      ****     {
 169:.\main.c      ****         /* Wake up ADC from low power mode */
 170:.\main.c      ****         ADC_Wakeup();
  94              		.loc 1 170 0
  95 000e FFF7FEFF 		bl	ADC_Wakeup
 171:.\main.c      ****         
 172:.\main.c      ****         /* Analog Front End. 
 173:.\main.c      ****          * Detects the input signal and measures Heart Rate 
 174:.\main.c      ****          */
 175:.\main.c      ****         ProcessHeartRateSignal();
  96              		.loc 1 175 0
  97 0012 FFF7FEFF 		bl	ProcessHeartRateSignal
 176:.\main.c      **** 
 177:.\main.c      ****         /* Put ADC in low power mode */
 178:.\main.c      ****         ADC_Sleep();
  98              		.loc 1 178 0
  99 0016 FFF7FEFF 		bl	ADC_Sleep
 179:.\main.c      ****         
 180:.\main.c      ****         /* Measure the current system timestamp from watchdog timer */
 181:.\main.c      ****         currentTimestamp = WatchdogTimer_GetTimestamp();        
 100              		.loc 1 181 0
 101 001a FFF7FEFF 		bl	WatchdogTimer_GetTimestamp
 102 001e 021C     		mov	r2, r0
 103 0020 1F4B     		ldr	r3, .L10
 104 0022 1A60     		str	r2, [r3]
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 6


 182:.\main.c      **** 
 183:.\main.c      ****         /* Update BLE connection parameters a few seconds after connection */
 184:.\main.c      **** //        if((CyBle_GetState() == CYBLE_STATE_CONNECTED) && 
 185:.\main.c      **** //           (connParamRequestState == CONN_PARAM_REQUEST_NOT_SENT))
 186:.\main.c      **** //        {
 187:.\main.c      **** //            if((currentTimestamp - timestampWhenConnected) > TIME_SINCE_CONNECTED_MS)
 188:.\main.c      **** //            {
 189:.\main.c      **** //                CyBle_L2capLeConnectionParamUpdateRequest(cyBle_connHandle.bdHandle, &hrmConnecti
 190:.\main.c      **** //                connParamRequestState = CONN_PARAM_REQUEST_SENT;
 191:.\main.c      **** //            }
 192:.\main.c      **** //        }
 193:.\main.c      ****         
 194:.\main.c      ****         
 195:.\main.c      ****         /* Send Heart Rate notification over BLE every second.
 196:.\main.c      ****          * Check if the current timestamp minus previous exceeds 1000 ms.
 197:.\main.c      ****          */
 198:.\main.c      ****         if((currentTimestamp - previousTimestamp) >= 1000)
 105              		.loc 1 198 0
 106 0024 1E4B     		ldr	r3, .L10
 107 0026 1A68     		ldr	r2, [r3]
 108 0028 1E4B     		ldr	r3, .L10+4
 109 002a 1B68     		ldr	r3, [r3]
 110 002c D21A     		sub	r2, r2, r3
 111 002e 1E4B     		ldr	r3, .L10+8
 112 0030 9A42     		cmp	r2, r3
 113 0032 06D9     		bls	.L5
 199:.\main.c      ****         {
 200:.\main.c      ****             /* Call API defined in BleProcessing.c to send 
 201:.\main.c      ****              * notification over BLE.
 202:.\main.c      ****              */
 203:.\main.c      ****             SendHeartRateOverBLE();
 114              		.loc 1 203 0
 115 0034 FFF7FEFF 		bl	SendHeartRateOverBLE
 204:.\main.c      ****             
 205:.\main.c      ****             /* Update the previous timestamp with the current timestamp. */
 206:.\main.c      ****             previousTimestamp = currentTimestamp;
 116              		.loc 1 206 0
 117 0038 194B     		ldr	r3, .L10
 118 003a 1A68     		ldr	r2, [r3]
 119 003c 194B     		ldr	r3, .L10+4
 120 003e 1A60     		str	r2, [r3]
 207:.\main.c      ****         }
 208:.\main.c      **** 
 209:.\main.c      ****         /* Try to stay in low power mode until the next watchdog interrupt */
 210:.\main.c      ****         while(WatchdogTimer_GetTimestamp() == currentTimestamp)
 121              		.loc 1 210 0
 122 0040 0CE0     		b	.L6
 123              	.L5:
 124 0042 0BE0     		b	.L6
 125              	.L7:
 211:.\main.c      ****         {
 212:.\main.c      ****             /* Process any pending BLE events */
 213:.\main.c      ****             CyBle_ProcessEvents();
 126              		.loc 1 213 0
 127 0044 FFF7FEFF 		bl	CyBle_ProcessEvents
 214:.\main.c      ****             
 215:.\main.c      ****             /* The idea of low power operation is to first request the BLE 
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 7


 216:.\main.c      ****              * block go to Deep Sleep, and then check whether it actually
 217:.\main.c      ****              * entered Deep Sleep. This is important because the BLE block
 218:.\main.c      ****              * runs asynchronous to the rest of the application and thus
 219:.\main.c      ****              * could be busy/idle independent of the application state. 
 220:.\main.c      ****              * 
 221:.\main.c      ****              * Once the BLE block is in Deep Sleep, only then the system 
 222:.\main.c      ****              * can enter Deep Sleep. This is important to maintain the BLE 
 223:.\main.c      ****              * connection alive while being in Deep Sleep.
 224:.\main.c      ****              */
 225:.\main.c      **** 
 226:.\main.c      ****             
 227:.\main.c      ****             /* Request the BLE block to enter Deep Sleep */
 228:.\main.c      ****           //  bleMode = CyBle_EnterLPM(CYBLE_BLESS_DEEPSLEEP);
 229:.\main.c      **** 
 230:.\main.c      ****             
 231:.\main.c      ****             /* Check if the BLE block entered Deep Sleep and if so, then the 
 232:.\main.c      ****              * system can enter Deep Sleep. This is done inside a Critical 
 233:.\main.c      ****              * Section (where global interrupts are disabled) to avoid a 
 234:.\main.c      ****              * race condition between application main (that wants to go to 
 235:.\main.c      ****              * Deep Sleep) and other interrupts (which keep the device from 
 236:.\main.c      ****              * going to Deep Sleep). 
 237:.\main.c      ****              */
 238:.\main.c      ****             interruptStatus = CyEnterCriticalSection();
 128              		.loc 1 238 0
 129 0048 FC1D     		add	r4, r7, #7
 130 004a FFF7FEFF 		bl	CyEnterCriticalSection
 131 004e 031C     		mov	r3, r0
 132 0050 2370     		strb	r3, [r4]
 239:.\main.c      ****             
 240:.\main.c      ****             /* Check if the BLE block entered Deep Sleep */
 241:.\main.c      ****            // if(CYBLE_BLESS_DEEPSLEEP == bleMode)
 242:.\main.c      ****           //  {
 243:.\main.c      ****                 /* Check the current state of BLE - System can enter Deep Sleep
 244:.\main.c      ****                  * only when the BLE block is starting the ECO (during 
 245:.\main.c      ****                  * pre-processing for a new connection event) or when it is 
 246:.\main.c      ****                  * idle.
 247:.\main.c      ****                  */
 248:.\main.c      ****           //      if((CyBle_GetBleSsState() == CYBLE_BLESS_STATE_ECO_ON) ||
 249:.\main.c      ****           //         (CyBle_GetBleSsState() == CYBLE_BLESS_STATE_DEEPSLEEP))
 250:.\main.c      ****           //      {
 251:.\main.c      ****           //          CySysPmDeepSleep();
 252:.\main.c      ****           //      }
 253:.\main.c      ****          //   }
 254:.\main.c      ****             /* The else condition signifies that the BLE block cannot enter 
 255:.\main.c      ****              * Deep Sleep and is in Active mode.  
 256:.\main.c      ****              */
 257:.\main.c      ****           //  else
 258:.\main.c      ****           //  {
 259:.\main.c      ****                 /* At this point, the CPU can enter Sleep, but Deep Sleep is not
 260:.\main.c      ****                  * allowed. 
 261:.\main.c      ****                  * There is one exception - at a connection event, when the BLE 
 262:.\main.c      ****                  * Rx/Tx has just finished, and the post processing for the 
 263:.\main.c      ****                  * connection event is ongoing, the CPU cannot go to sleep.
 264:.\main.c      ****                  * The CPU should wait in Active mode until the post processing 
 265:.\main.c      ****                  * is complete while continuously polling the BLE low power 
 266:.\main.c      ****                  * entry. As soon as post processing is complete, the BLE block 
 267:.\main.c      ****                  * would enter Deep Sleep (because of the polling) and the 
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 8


 268:.\main.c      ****                  * system Deep Sleep would then be entered. Deep Sleep is the 
 269:.\main.c      ****                  * preferred low power mode since it takes much lesser current.
 270:.\main.c      ****                  */
 271:.\main.c      ****           //      if(CyBle_GetBleSsState() != CYBLE_BLESS_STATE_EVENT_CLOSE)
 272:.\main.c      ****           //      {
 273:.\main.c      ****           //          CySysPmSleep();
 274:.\main.c      ****           //      }
 275:.\main.c      ****           //  }
 276:.\main.c      ****             
 277:.\main.c      ****             /* Exit Critical section - Global interrupts are enabled again */
 278:.\main.c      ****             CyExitCriticalSection(interruptStatus);
 133              		.loc 1 278 0
 134 0052 FB1D     		add	r3, r7, #7
 135 0054 1B78     		ldrb	r3, [r3]
 136 0056 181C     		mov	r0, r3
 137 0058 FFF7FEFF 		bl	CyExitCriticalSection
 138              	.L6:
 210:.\main.c      ****         while(WatchdogTimer_GetTimestamp() == currentTimestamp)
 139              		.loc 1 210 0 discriminator 1
 140 005c FFF7FEFF 		bl	WatchdogTimer_GetTimestamp
 141 0060 021C     		mov	r2, r0
 142 0062 0F4B     		ldr	r3, .L10
 143 0064 1B68     		ldr	r3, [r3]
 144 0066 9A42     		cmp	r2, r3
 145 0068 ECD0     		beq	.L7
 279:.\main.c      ****         }
 280:.\main.c      **** 
 281:.\main.c      ****         /* Hibernate entry point - Hibernate is entered upon a BLE disconnect
 282:.\main.c      ****          * event or advertisement timeout. Wakeup happens via SW2 switch press, 
 283:.\main.c      ****          * upon which the execution starts from the first line of code. 
 284:.\main.c      ****          * The I/O state, RAM and UDBs are retained during Hibernate.
 285:.\main.c      ****          */
 286:.\main.c      ****         if(enterHibernateFlag)
 146              		.loc 1 286 0
 147 006a 104B     		ldr	r3, .L10+12
 148 006c 1B78     		ldrb	r3, [r3]
 149 006e 002B     		cmp	r3, #0
 150 0070 14D0     		beq	.L8
 287:.\main.c      ****         {
 288:.\main.c      ****             /* Stop the BLE component */
 289:.\main.c      ****             CyBle_Stop();
 151              		.loc 1 289 0
 152 0072 FFF7FEFF 		bl	CyBle_Stop
 290:.\main.c      ****             
 291:.\main.c      ****             /* Enable the Hibernate wakeup functionality */
 292:.\main.c      ****             SW2_Switch_ClearInterrupt();
 153              		.loc 1 292 0
 154 0076 FFF7FEFF 		bl	SW2_Switch_ClearInterrupt
 293:.\main.c      ****             Wakeup_ISR_Start();
 155              		.loc 1 293 0
 156 007a FFF7FEFF 		bl	Wakeup_ISR_Start
 294:.\main.c      ****             
 295:.\main.c      ****             #if (RGB_LED_IN_PROJECT)
 296:.\main.c      ****                 /* Turn off Green and Blue LEDs to indicate Hibernate */
 297:.\main.c      ****                 Led_Advertising_Green_Write(1);
 157              		.loc 1 297 0
 158 007e 0120     		mov	r0, #1
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 9


 159 0080 FFF7FEFF 		bl	Led_Advertising_Green_Write
 298:.\main.c      ****                 Led_Connected_Blue_Write(1);
 160              		.loc 1 298 0
 161 0084 0120     		mov	r0, #1
 162 0086 FFF7FEFF 		bl	Led_Connected_Blue_Write
 299:.\main.c      ****                 
 300:.\main.c      ****                 /* Change the GPIO state to High-Z */
 301:.\main.c      ****                 Led_Advertising_Green_SetDriveMode(Led_Advertising_Green_DM_ALG_HIZ);
 163              		.loc 1 301 0
 164 008a 0020     		mov	r0, #0
 165 008c FFF7FEFF 		bl	Led_Advertising_Green_SetDriveMode
 302:.\main.c      ****                 Led_Connected_Blue_SetDriveMode(Led_Connected_Blue_DM_ALG_HIZ);
 166              		.loc 1 302 0
 167 0090 0020     		mov	r0, #0
 168 0092 FFF7FEFF 		bl	Led_Connected_Blue_SetDriveMode
 303:.\main.c      ****             #endif  /* #if (RGB_LED_IN_PROJECT) */
 304:.\main.c      ****             
 305:.\main.c      ****             /* Enter hibernate mode */
 306:.\main.c      ****             CySysPmHibernate();
 169              		.loc 1 306 0
 170 0096 FFF7FEFF 		bl	CySysPmHibernate
 307:.\main.c      ****         }
 308:.\main.c      ****     }
 171              		.loc 1 308 0
 172 009a B8E7     		b	.L9
 173              	.L8:
 174 009c B7E7     		b	.L9
 175              	.L11:
 176 009e C046     		.align	2
 177              	.L10:
 178 00a0 00000000 		.word	currentTimestamp.6600
 179 00a4 04000000 		.word	previousTimestamp.6599
 180 00a8 E7030000 		.word	999
 181 00ac 00000000 		.word	enterHibernateFlag
 182              		.cfi_endproc
 183              	.LFE36:
 184              		.size	main, .-main
 185              		.bss
 186              		.align	2
 187              	currentTimestamp.6600:
 188 0000 00000000 		.space	4
 189              		.align	2
 190              	previousTimestamp.6599:
 191 0004 00000000 		.space	4
 192              		.text
 193              	.Letext0:
 194              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 195              		.file 3 ".\\BleProcessing.h"
 196              		.section	.debug_info,"",%progbits
 197              	.Ldebug_info0:
 198 0000 07010000 		.4byte	0x107
 199 0004 0400     		.2byte	0x4
 200 0006 00000000 		.4byte	.Ldebug_abbrev0
 201 000a 04       		.byte	0x4
 202 000b 01       		.uleb128 0x1
 203 000c BD000000 		.4byte	.LASF19
 204 0010 01       		.byte	0x1
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 10


 205 0011 5B000000 		.4byte	.LASF20
 206 0015 70010000 		.4byte	.LASF21
 207 0019 00000000 		.4byte	.Ldebug_ranges0+0
 208 001d 00000000 		.4byte	0
 209 0021 00000000 		.4byte	.Ldebug_line0
 210 0025 02       		.uleb128 0x2
 211 0026 01       		.byte	0x1
 212 0027 06       		.byte	0x6
 213 0028 4C010000 		.4byte	.LASF0
 214 002c 02       		.uleb128 0x2
 215 002d 01       		.byte	0x1
 216 002e 08       		.byte	0x8
 217 002f 22000000 		.4byte	.LASF1
 218 0033 02       		.uleb128 0x2
 219 0034 02       		.byte	0x2
 220 0035 05       		.byte	0x5
 221 0036 09020000 		.4byte	.LASF2
 222 003a 02       		.uleb128 0x2
 223 003b 02       		.byte	0x2
 224 003c 07       		.byte	0x7
 225 003d 39010000 		.4byte	.LASF3
 226 0041 02       		.uleb128 0x2
 227 0042 04       		.byte	0x4
 228 0043 05       		.byte	0x5
 229 0044 A7000000 		.4byte	.LASF4
 230 0048 02       		.uleb128 0x2
 231 0049 04       		.byte	0x4
 232 004a 07       		.byte	0x7
 233 004b 49000000 		.4byte	.LASF5
 234 004f 02       		.uleb128 0x2
 235 0050 08       		.byte	0x8
 236 0051 05       		.byte	0x5
 237 0052 00000000 		.4byte	.LASF6
 238 0056 02       		.uleb128 0x2
 239 0057 08       		.byte	0x8
 240 0058 07       		.byte	0x7
 241 0059 64000000 		.4byte	.LASF7
 242 005d 03       		.uleb128 0x3
 243 005e 04       		.byte	0x4
 244 005f 05       		.byte	0x5
 245 0060 696E7400 		.ascii	"int\000"
 246 0064 02       		.uleb128 0x2
 247 0065 04       		.byte	0x4
 248 0066 07       		.byte	0x7
 249 0067 15000000 		.4byte	.LASF8
 250 006b 04       		.uleb128 0x4
 251 006c 43000000 		.4byte	.LASF9
 252 0070 02       		.byte	0x2
 253 0071 A1       		.byte	0xa1
 254 0072 2C000000 		.4byte	0x2c
 255 0076 04       		.uleb128 0x4
 256 0077 0E000000 		.4byte	.LASF10
 257 007b 02       		.byte	0x2
 258 007c A3       		.byte	0xa3
 259 007d 48000000 		.4byte	0x48
 260 0081 02       		.uleb128 0x2
 261 0082 04       		.byte	0x4
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 11


 262 0083 04       		.byte	0x4
 263 0084 6A010000 		.4byte	.LASF11
 264 0088 02       		.uleb128 0x2
 265 0089 08       		.byte	0x8
 266 008a 04       		.byte	0x4
 267 008b B0000000 		.4byte	.LASF12
 268 008f 02       		.uleb128 0x2
 269 0090 01       		.byte	0x1
 270 0091 08       		.byte	0x8
 271 0092 8C000000 		.4byte	.LASF13
 272 0096 02       		.uleb128 0x2
 273 0097 04       		.byte	0x4
 274 0098 07       		.byte	0x7
 275 0099 23020000 		.4byte	.LASF14
 276 009d 05       		.uleb128 0x5
 277 009e 7B000000 		.4byte	.LASF22
 278 00a2 01       		.byte	0x1
 279 00a3 60       		.byte	0x60
 280 00a4 00000000 		.4byte	.LFB35
 281 00a8 3C000000 		.4byte	.LFE35-.LFB35
 282 00ac 01       		.uleb128 0x1
 283 00ad 9C       		.byte	0x9c
 284 00ae 06       		.uleb128 0x6
 285 00af A2000000 		.4byte	.LASF23
 286 00b3 01       		.byte	0x1
 287 00b4 9B       		.byte	0x9b
 288 00b5 5D000000 		.4byte	0x5d
 289 00b9 00000000 		.4byte	.LFB36
 290 00bd B0000000 		.4byte	.LFE36-.LFB36
 291 00c1 01       		.uleb128 0x1
 292 00c2 9C       		.byte	0x9c
 293 00c3 F8000000 		.4byte	0xf8
 294 00c7 07       		.uleb128 0x7
 295 00c8 58010000 		.4byte	.LASF15
 296 00cc 01       		.byte	0x1
 297 00cd 9D       		.byte	0x9d
 298 00ce 76000000 		.4byte	0x76
 299 00d2 05       		.uleb128 0x5
 300 00d3 03       		.byte	0x3
 301 00d4 04000000 		.4byte	previousTimestamp.6599
 302 00d8 07       		.uleb128 0x7
 303 00d9 91000000 		.4byte	.LASF16
 304 00dd 01       		.byte	0x1
 305 00de 9E       		.byte	0x9e
 306 00df 76000000 		.4byte	0x76
 307 00e3 05       		.uleb128 0x5
 308 00e4 03       		.byte	0x3
 309 00e5 00000000 		.4byte	currentTimestamp.6600
 310 00e9 07       		.uleb128 0x7
 311 00ea 13020000 		.4byte	.LASF17
 312 00ee 01       		.byte	0x1
 313 00ef A0       		.byte	0xa0
 314 00f0 6B000000 		.4byte	0x6b
 315 00f4 02       		.uleb128 0x2
 316 00f5 91       		.byte	0x91
 317 00f6 6F       		.sleb128 -17
 318 00f7 00       		.byte	0
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 12


 319 00f8 08       		.uleb128 0x8
 320 00f9 30000000 		.4byte	.LASF24
 321 00fd 03       		.byte	0x3
 322 00fe 43       		.byte	0x43
 323 00ff 03010000 		.4byte	0x103
 324 0103 02       		.uleb128 0x2
 325 0104 01       		.byte	0x1
 326 0105 02       		.byte	0x2
 327 0106 B7000000 		.4byte	.LASF18
 328 010a 00       		.byte	0
 329              		.section	.debug_abbrev,"",%progbits
 330              	.Ldebug_abbrev0:
 331 0000 01       		.uleb128 0x1
 332 0001 11       		.uleb128 0x11
 333 0002 01       		.byte	0x1
 334 0003 25       		.uleb128 0x25
 335 0004 0E       		.uleb128 0xe
 336 0005 13       		.uleb128 0x13
 337 0006 0B       		.uleb128 0xb
 338 0007 03       		.uleb128 0x3
 339 0008 0E       		.uleb128 0xe
 340 0009 1B       		.uleb128 0x1b
 341 000a 0E       		.uleb128 0xe
 342 000b 55       		.uleb128 0x55
 343 000c 17       		.uleb128 0x17
 344 000d 11       		.uleb128 0x11
 345 000e 01       		.uleb128 0x1
 346 000f 10       		.uleb128 0x10
 347 0010 17       		.uleb128 0x17
 348 0011 00       		.byte	0
 349 0012 00       		.byte	0
 350 0013 02       		.uleb128 0x2
 351 0014 24       		.uleb128 0x24
 352 0015 00       		.byte	0
 353 0016 0B       		.uleb128 0xb
 354 0017 0B       		.uleb128 0xb
 355 0018 3E       		.uleb128 0x3e
 356 0019 0B       		.uleb128 0xb
 357 001a 03       		.uleb128 0x3
 358 001b 0E       		.uleb128 0xe
 359 001c 00       		.byte	0
 360 001d 00       		.byte	0
 361 001e 03       		.uleb128 0x3
 362 001f 24       		.uleb128 0x24
 363 0020 00       		.byte	0
 364 0021 0B       		.uleb128 0xb
 365 0022 0B       		.uleb128 0xb
 366 0023 3E       		.uleb128 0x3e
 367 0024 0B       		.uleb128 0xb
 368 0025 03       		.uleb128 0x3
 369 0026 08       		.uleb128 0x8
 370 0027 00       		.byte	0
 371 0028 00       		.byte	0
 372 0029 04       		.uleb128 0x4
 373 002a 16       		.uleb128 0x16
 374 002b 00       		.byte	0
 375 002c 03       		.uleb128 0x3
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 13


 376 002d 0E       		.uleb128 0xe
 377 002e 3A       		.uleb128 0x3a
 378 002f 0B       		.uleb128 0xb
 379 0030 3B       		.uleb128 0x3b
 380 0031 0B       		.uleb128 0xb
 381 0032 49       		.uleb128 0x49
 382 0033 13       		.uleb128 0x13
 383 0034 00       		.byte	0
 384 0035 00       		.byte	0
 385 0036 05       		.uleb128 0x5
 386 0037 2E       		.uleb128 0x2e
 387 0038 00       		.byte	0
 388 0039 03       		.uleb128 0x3
 389 003a 0E       		.uleb128 0xe
 390 003b 3A       		.uleb128 0x3a
 391 003c 0B       		.uleb128 0xb
 392 003d 3B       		.uleb128 0x3b
 393 003e 0B       		.uleb128 0xb
 394 003f 27       		.uleb128 0x27
 395 0040 19       		.uleb128 0x19
 396 0041 11       		.uleb128 0x11
 397 0042 01       		.uleb128 0x1
 398 0043 12       		.uleb128 0x12
 399 0044 06       		.uleb128 0x6
 400 0045 40       		.uleb128 0x40
 401 0046 18       		.uleb128 0x18
 402 0047 9642     		.uleb128 0x2116
 403 0049 19       		.uleb128 0x19
 404 004a 00       		.byte	0
 405 004b 00       		.byte	0
 406 004c 06       		.uleb128 0x6
 407 004d 2E       		.uleb128 0x2e
 408 004e 01       		.byte	0x1
 409 004f 3F       		.uleb128 0x3f
 410 0050 19       		.uleb128 0x19
 411 0051 03       		.uleb128 0x3
 412 0052 0E       		.uleb128 0xe
 413 0053 3A       		.uleb128 0x3a
 414 0054 0B       		.uleb128 0xb
 415 0055 3B       		.uleb128 0x3b
 416 0056 0B       		.uleb128 0xb
 417 0057 49       		.uleb128 0x49
 418 0058 13       		.uleb128 0x13
 419 0059 11       		.uleb128 0x11
 420 005a 01       		.uleb128 0x1
 421 005b 12       		.uleb128 0x12
 422 005c 06       		.uleb128 0x6
 423 005d 40       		.uleb128 0x40
 424 005e 18       		.uleb128 0x18
 425 005f 9642     		.uleb128 0x2116
 426 0061 19       		.uleb128 0x19
 427 0062 01       		.uleb128 0x1
 428 0063 13       		.uleb128 0x13
 429 0064 00       		.byte	0
 430 0065 00       		.byte	0
 431 0066 07       		.uleb128 0x7
 432 0067 34       		.uleb128 0x34
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 14


 433 0068 00       		.byte	0
 434 0069 03       		.uleb128 0x3
 435 006a 0E       		.uleb128 0xe
 436 006b 3A       		.uleb128 0x3a
 437 006c 0B       		.uleb128 0xb
 438 006d 3B       		.uleb128 0x3b
 439 006e 0B       		.uleb128 0xb
 440 006f 49       		.uleb128 0x49
 441 0070 13       		.uleb128 0x13
 442 0071 02       		.uleb128 0x2
 443 0072 18       		.uleb128 0x18
 444 0073 00       		.byte	0
 445 0074 00       		.byte	0
 446 0075 08       		.uleb128 0x8
 447 0076 34       		.uleb128 0x34
 448 0077 00       		.byte	0
 449 0078 03       		.uleb128 0x3
 450 0079 0E       		.uleb128 0xe
 451 007a 3A       		.uleb128 0x3a
 452 007b 0B       		.uleb128 0xb
 453 007c 3B       		.uleb128 0x3b
 454 007d 0B       		.uleb128 0xb
 455 007e 49       		.uleb128 0x49
 456 007f 13       		.uleb128 0x13
 457 0080 3F       		.uleb128 0x3f
 458 0081 19       		.uleb128 0x19
 459 0082 3C       		.uleb128 0x3c
 460 0083 19       		.uleb128 0x19
 461 0084 00       		.byte	0
 462 0085 00       		.byte	0
 463 0086 00       		.byte	0
 464              		.section	.debug_aranges,"",%progbits
 465 0000 24000000 		.4byte	0x24
 466 0004 0200     		.2byte	0x2
 467 0006 00000000 		.4byte	.Ldebug_info0
 468 000a 04       		.byte	0x4
 469 000b 00       		.byte	0
 470 000c 0000     		.2byte	0
 471 000e 0000     		.2byte	0
 472 0010 00000000 		.4byte	.LFB35
 473 0014 3C000000 		.4byte	.LFE35-.LFB35
 474 0018 00000000 		.4byte	.LFB36
 475 001c B0000000 		.4byte	.LFE36-.LFB36
 476 0020 00000000 		.4byte	0
 477 0024 00000000 		.4byte	0
 478              		.section	.debug_ranges,"",%progbits
 479              	.Ldebug_ranges0:
 480 0000 00000000 		.4byte	.LFB35
 481 0004 3C000000 		.4byte	.LFE35
 482 0008 00000000 		.4byte	.LFB36
 483 000c B0000000 		.4byte	.LFE36
 484 0010 00000000 		.4byte	0
 485 0014 00000000 		.4byte	0
 486              		.section	.debug_line,"",%progbits
 487              	.Ldebug_line0:
 488 0000 B1000000 		.section	.debug_str,"MS",%progbits,1
 488      02005A00 
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 15


 488      00000201 
 488      FB0E0D00 
 488      01010101 
 489              	.LASF6:
 490 0000 6C6F6E67 		.ascii	"long long int\000"
 490      206C6F6E 
 490      6720696E 
 490      7400
 491              	.LASF10:
 492 000e 75696E74 		.ascii	"uint32\000"
 492      333200
 493              	.LASF8:
 494 0015 756E7369 		.ascii	"unsigned int\000"
 494      676E6564 
 494      20696E74 
 494      00
 495              	.LASF1:
 496 0022 756E7369 		.ascii	"unsigned char\000"
 496      676E6564 
 496      20636861 
 496      7200
 497              	.LASF24:
 498 0030 656E7465 		.ascii	"enterHibernateFlag\000"
 498      72486962 
 498      65726E61 
 498      7465466C 
 498      616700
 499              	.LASF9:
 500 0043 75696E74 		.ascii	"uint8\000"
 500      3800
 501              	.LASF5:
 502 0049 6C6F6E67 		.ascii	"long unsigned int\000"
 502      20756E73 
 502      69676E65 
 502      6420696E 
 502      7400
 503              	.LASF20:
 504 005b 2E5C6D61 		.ascii	".\\main.c\000"
 504      696E2E63 
 504      00
 505              	.LASF7:
 506 0064 6C6F6E67 		.ascii	"long long unsigned int\000"
 506      206C6F6E 
 506      6720756E 
 506      7369676E 
 506      65642069 
 507              	.LASF22:
 508 007b 496E6974 		.ascii	"InitializeSystem\000"
 508      69616C69 
 508      7A655379 
 508      7374656D 
 508      00
 509              	.LASF13:
 510 008c 63686172 		.ascii	"char\000"
 510      00
 511              	.LASF16:
 512 0091 63757272 		.ascii	"currentTimestamp\000"
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 16


 512      656E7454 
 512      696D6573 
 512      74616D70 
 512      00
 513              	.LASF23:
 514 00a2 6D61696E 		.ascii	"main\000"
 514      00
 515              	.LASF4:
 516 00a7 6C6F6E67 		.ascii	"long int\000"
 516      20696E74 
 516      00
 517              	.LASF12:
 518 00b0 646F7562 		.ascii	"double\000"
 518      6C6500
 519              	.LASF18:
 520 00b7 5F426F6F 		.ascii	"_Bool\000"
 520      6C00
 521              	.LASF19:
 522 00bd 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 522      4320342E 
 522      382E3420 
 522      32303134 
 522      30353236 
 523 00f0 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 523      20726576 
 523      6973696F 
 523      6E203231 
 523      31333538 
 524 0123 30202D66 		.ascii	"0 -ffunction-sections\000"
 524      66756E63 
 524      74696F6E 
 524      2D736563 
 524      74696F6E 
 525              	.LASF3:
 526 0139 73686F72 		.ascii	"short unsigned int\000"
 526      7420756E 
 526      7369676E 
 526      65642069 
 526      6E7400
 527              	.LASF0:
 528 014c 7369676E 		.ascii	"signed char\000"
 528      65642063 
 528      68617200 
 529              	.LASF15:
 530 0158 70726576 		.ascii	"previousTimestamp\000"
 530      696F7573 
 530      54696D65 
 530      7374616D 
 530      7000
 531              	.LASF11:
 532 016a 666C6F61 		.ascii	"float\000"
 532      7400
 533              	.LASF21:
 534 0170 443A5C55 		.ascii	"D:\\Users\\jsing\\Downloads\\BLE-Lab-3-4955f5a23528"
 534      73657273 
 534      5C6A7369 
 534      6E675C44 
ARM GAS  C:\Users\jsing\AppData\Local\Temp\ccWJCadF.s 			page 17


 534      6F776E6C 
 535 019f 65353465 		.ascii	"e54e449b293060fcb953c355adb5\\BLE-Lab-3-4955f5a2352"
 535      34343962 
 535      32393330 
 535      36306663 
 535      62393533 
 536 01d1 38653534 		.ascii	"8e54e449b293060fcb953c355adb5\\BLE Lab 3\\BLE Lab 3"
 536      65343439 
 536      62323933 
 536      30363066 
 536      63623935 
 537 0202 2E637964 		.ascii	".cydsn\000"
 537      736E00
 538              	.LASF2:
 539 0209 73686F72 		.ascii	"short int\000"
 539      7420696E 
 539      7400
 540              	.LASF17:
 541 0213 696E7465 		.ascii	"interruptStatus\000"
 541      72727570 
 541      74537461 
 541      74757300 
 542              	.LASF14:
 543 0223 73697A65 		.ascii	"sizetype\000"
 543      74797065 
 543      00
 544              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
